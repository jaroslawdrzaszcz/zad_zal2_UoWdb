package repodb.db;

import java.sql.Connection;
import java.sql.SQLException;

import repodb.db.mappers.ResultSetMapper;
import repodb.db.uow.UnitOfWork;
import repodb.domian.Email;

public class EmailRepository extends RepositoryBase<Email>{

	Connection connection;
	
	protected String tableName(){
		return "email";
	}
	protected String createTableSql(){
		return "CREATE TABLE email(id INT GENERATED BY DEFAULT AS IDENTITY, contactId INT,"
				+ "email VARCHAR(30), mailDate date, mailTime time, description VARCHAR(30))";
	}  
	protected String deleteSql(){
		return "DELETE FROM email WHERE id=?";
	}
	protected String insertSql(){
		return "INSERT INTO email(contactId, email, mailDate, mailTime, description) VALUES(?,?,?,?,?)";
	}
	protected String selectAllSql(){
		return "SELECT * FROM email";
	}
	protected String selectByIdSql(){
		return "SELECT * FROM email WHERE id=?";
	}
	protected String updateSql(){
		return "UPDATE email SET contactId=?, email=?, mailDate=?, mailTime=?, description=? WHERE id=?";
	}
	
	public EmailRepository(Connection connection, ResultSetMapper<Email> mapper, UnitOfWork uow) throws SQLException{
		super(connection, mapper, uow);
	}
	
	public Connection getConnection() {
		return connection;
	}
	
	public void setConnection(Connection connection) {
		this.connection = connection;
	}
	@Override
	protected void setupUpdate(Email email) throws SQLException {
		update.setInt(1, email.getContactId());
		update.setString(2, email.getEmail());
		update.setString(3, email.getMailDate());
		update.setString(4, email.getMailTime());
		update.setString(5, email.getDescription());
		update.setInt(6, email.getId());
	}
	@Override
	protected void setupInsert(Email email) throws SQLException {
		insert.setInt(1, email.getContactId());
		insert.setString(2, email.getEmail());
		insert.setString(3, email.getMailDate());
		insert.setString(4, email.getMailTime());
		insert.setString(5, email.getDescription());		
	}
}
